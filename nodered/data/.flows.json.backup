[
    {
        "id": "356ea6f4c1f619bc",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "662fd1abba56a419",
        "type": "telegram bot",
        "botname": "FirefighterBot",
        "usernames": "montoruwalkr",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "edf1038d908d0e6f",
        "type": "influxdb",
        "hostname": "172.30.0.102",
        "port": "8086",
        "protocol": "http",
        "database": "forestsensors",
        "name": "IoT_Influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.30.0.102:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "468835510e293596",
        "type": "change",
        "z": "356ea6f4c1f619bc",
        "name": "Add Telegram parameters",
        "rules": [
            {
                "t": "set",
                "p": "payload.username",
                "pt": "msg",
                "to": "montoruwalkr",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.chatId",
                "pt": "msg",
                "to": "6455626845",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.content",
                "pt": "msg",
                "to": "payload.alert",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "2741cadd25e52534"
            ]
        ]
    },
    {
        "id": "2741cadd25e52534",
        "type": "telegram sender",
        "z": "356ea6f4c1f619bc",
        "name": "Send Telegram Message",
        "bot": "662fd1abba56a419",
        "haserroroutput": false,
        "outputs": 1,
        "x": 610,
        "y": 620,
        "wires": [
            [
                "882931460110c834"
            ]
        ]
    },
    {
        "id": "882931460110c834",
        "type": "debug",
        "z": "356ea6f4c1f619bc",
        "name": "Debug Telegram Bot",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 700,
        "wires": []
    },
    {
        "id": "5fe460c06e16102f",
        "type": "influxdb in",
        "z": "356ea6f4c1f619bc",
        "influxdb": "edf1038d908d0e6f",
        "name": "Access InfluxDB",
        "query": "from(bucket: \"forestsensors\")\n|> range(start: -9s)\n|> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "se4iot",
        "x": 380,
        "y": 380,
        "wires": [
            [
                "e7e139d7d4dfcfed",
                "db556ada97593f4e"
            ]
        ]
    },
    {
        "id": "e7e139d7d4dfcfed",
        "type": "function",
        "z": "356ea6f4c1f619bc",
        "name": "Analyze Potential Fire",
        "func": "if (msg.payload.length > 0) {\n    let finaldMsg = \"\";\n\n    const newMsg = { payload: {} }\n    // Define thresholds for each _field\n    const thresholds = {\n        \"air_quality\": 350,\n        \"humidity\": 42,\n        \"light_intensity\": 700,\n        \"temperature\": 28\n    };\n\n    // Create a map to store the count of exceeded thresholds for each topic\n    const exceededThresholdsCount = new Map();\n\n    // Function to extract the simplified topic\n    function simplifyTopic(topic) {\n        return topic.replace(/^.*?\\/(forest_\\d+\\/area_\\d+)$/, \"$1\");\n    }\n\n    // Check data against thresholds and generate alerts\n    msg.payload.forEach(data => {\n        const field = data[\"_field\"];\n        const value = data[\"_value\"];\n        const threshold_sensor = thresholds[field];\n        const simplifiedTopic = simplifyTopic(data.topic);\n\n\n\n        // Initialize the count if it's not in the map\n        if (!exceededThresholdsCount.has(simplifiedTopic)) {\n            exceededThresholdsCount.set(simplifiedTopic, 0);\n        }\n\n        switch (field) {\n            case \"air_quality\":\n                if (value > threshold_sensor) {\n                    exceededThresholdsCount.set(simplifiedTopic, exceededThresholdsCount.get(simplifiedTopic) + 1);\n                }\n                break;\n            case \"humidity\":\n                if (value < threshold_sensor) {\n                    exceededThresholdsCount.set(simplifiedTopic, exceededThresholdsCount.get(simplifiedTopic) + 1);\n                }\n                break;\n            case \"light_intensity\":\n                if (value > threshold_sensor) {\n                    exceededThresholdsCount.set(simplifiedTopic, exceededThresholdsCount.get(simplifiedTopic) + 1);\n                }\n                break;\n            case \"temperature\":\n                if (value > threshold_sensor) {\n                    exceededThresholdsCount.set(simplifiedTopic, exceededThresholdsCount.get(simplifiedTopic) + 1);\n                }\n            break;\n            // Add additional cases for other fields if needed\n        }\n\n\n        // Increment the count for the current topic\n\n        // Check if the count is higher than 2\n        if (exceededThresholdsCount.get(simplifiedTopic) >= 2) {\n            finaldMsg += `Alert in ${simplifiedTopic}. ${exceededThresholdsCount.get(simplifiedTopic)} exceeding thresholds \\n`;\n            // Additional logic for sending alerts can be added here\n        }\n    });\n    newMsg.payload[`alert`] = finaldMsg;\n    node.warn(finaldMsg);\n    return newMsg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 460,
        "wires": [
            [
                "468835510e293596"
            ]
        ]
    },
    {
        "id": "db556ada97593f4e",
        "type": "debug",
        "z": "356ea6f4c1f619bc",
        "name": "Debug InfluxDB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 300,
        "wires": []
    },
    {
        "id": "0315a041e107c085",
        "type": "inject",
        "z": "356ea6f4c1f619bc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 380,
        "wires": [
            []
        ]
    }
]